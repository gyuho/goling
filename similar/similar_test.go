package similar

import (
	"strings"
	"testing"
)

func TestCosine(t *testing.T) {
	// the bigger the return value is,
	// the more similar the two texts are.

	// very similar texts (0.8616404368553293)
	text1 := "This is a foo bar sentence."
	text2 := "This sentence is similar to a foo bar sentence."
	// very different texts (0.04879500364742665)
	text3 := "AppendFloat appends the string form of the floating-point number f, as generated by FormatFloat, to dst and returns the extended buffer."
	text4 := "There are very simple ways to use matlab in parallel, with GPU, multi-thread support."
	if Cosine(text1, text2) < Cosine(text3, text4) {
		t.Errorf("Error: text1, text2 should be more similar than text3, text4")
	}
	// less different texts (0.31980107453341566)
	text5 := "How is the product team at SEOmoz structured?"
	text6 := "Moz: How trustworthy is SEOMoz after what they did to DOZ?"

	// same texts (1)
	text7 := "I am a gopher."
	text8 := "I am a gopher."
	if Cosine(text5, text6) > Cosine(text7, text8) {
		t.Errorf("Error: text7, text8 should be more simliar than text3, text4")
	}

	// totally different text
	text9 := "I am a gopher."
	text0 := ""
	if Cosine(text9, text0) != 0.0001 {
		t.Errorf("Error: text9, text10 should return 0.0001 with smoothing")
	}
	if Cosine("intention", "execution") != 0.6917144638660746 {
		t.Errorf("Error: intention, execution, Cosine")
	}
	if Cosine("i n t e n t i o n", "e x e c u t i o n") != 0.6917144638660746 {
		t.Errorf("Error: intention, execution, Cosine")
	}
	if Cosine("AGGCTATCACCTGACCTCCAGGCCGATGCC", "TAGCTATCACGACCGCGGTCGATTTGCCCGAC") != 0.9890107762526607 {
		t.Errorf("DNA, Cosine")
	}
	if Cosine("like", "lllikee") != 0.9036961141150639 {
		t.Errorf("like", "lllikee", "Cosine")
	}
	if Cosine("love it", "go to the beach") != 0.0001 {
		t.Errorf("love it", "go to the beach", "Cosine")
	}
	sim00 := Cosine("Spokesman confirms senior government adviser was shot.", "Spokesman said the senior adviser was shot dead.")
	csim00 := 0.5345224838248487
	if sim00 != csim00 {
		t.Errorf("%f != %f (%v)", sim00, csim00, sim00-csim00)
	}
}

func TestLevenshtein(t *testing.T) {
	// the bigger the return value is,
	// the more similar the two texts are.

	// insertion
	if Levenshtein(strings.ToLower("Hello"), strings.ToLower("Hellok")) != 1 {
		t.Errorf("'Hello', 'Hellok' = %v", Levenshtein(strings.ToLower("Hello"), strings.ToLower("Hellok")))
	}

	// deletion
	if Levenshtein(strings.ToLower("Hellok"), strings.ToLower("Hello")) != 1 {
		t.Errorf("'Hellok', 'Hello' = %v", Levenshtein(strings.ToLower("Hellok"), strings.ToLower("Hello")))
	}

	// substituition
	if Levenshtein(strings.ToLower("Hellok"), strings.ToLower("Helloa")) != 1 {
		t.Errorf("'Hellok', 'Helloa' = %v", Levenshtein(strings.ToLower("Hellok"), strings.ToLower("Helloa")))
	}

	// very similar texts
	text1 := "This is a foo bar sentence."
	text2 := "This sentence is similar to a foo bar sentence."
	if Levenshtein(strings.ToLower(text1), strings.ToLower(text2)) != 20 {
		t.Errorf("text1, text2 = %v", Levenshtein(strings.ToLower(text1), strings.ToLower(text2)))
	}

	// very different texts
	text3 := "AppendFloat appends the string form of the floating-point number f, as generated by FormatFloat, to dst and returns the extended buffer."
	text4 := "There are very simple ways to use matlab in parallel, with GPU, multi-thread support."
	if Levenshtein(strings.ToLower(text3), text4) != 98 {
		t.Errorf("text3, text4 = %v", Levenshtein(strings.ToLower(text3), text4))
	}

	// less different texts
	text5 := "How is the product team at SEOmoz structured?"
	text6 := "Moz: How trustworthy is SEOMoz after what they did to DOZ?"
	if Levenshtein(strings.ToLower(text5), strings.ToLower(text6)) != 40 {
		t.Errorf("text5, text6 = %v", Levenshtein(strings.ToLower(text5), strings.ToLower(text6)))
	}

	// same texts
	text7 := "I am a gopher."
	text8 := "I am a gopher."
	if Levenshtein(strings.ToLower(text7), strings.ToLower(text8)) != 0.0001 {
		t.Errorf("text7, text8 = %v", Levenshtein(strings.ToLower(text7), strings.ToLower(text8)))
	}

	// totally different text
	text9 := "I am a gopher."
	text0 := ""
	if Levenshtein(strings.ToLower(text9), text0) != 14 {
		t.Errorf("'I am a gopher', '' = %v", Levenshtein(strings.ToLower(text9), text0))
	}

	if Levenshtein(strings.ToLower("intention"), "execution") != 5 {
		t.Errorf("'intention', 'execution' = %v", Levenshtein(strings.ToLower("intention"), "execution"))
	}

	if Levenshtein(strings.ToLower("i n t e n t i o n"), "e x e c u t i o n") != 5 {
		t.Errorf("'i n t e n t i o n', 'e x e c u t i o n' = %v", Levenshtein(strings.ToLower("i n t e n t i o n"), "e x e c u t i o n"))
	}

	sim1 := Levenshtein(strings.ToLower("AGGCTATCACCTGACCTCCAGGCCGATGCC"), strings.ToLower("TAGCTATCACGACCGCGGTCGATTTGCCCGAC"))
	if sim1 != 14 {
		t.Errorf("DNA = %v", sim1)
	}

	if Levenshtein(strings.ToLower("like"), "lllikee") != 3 {
		t.Errorf("'like', 'lllikee' = %v", Levenshtein(strings.ToLower("like"), "lllikee"))
	}

	if Levenshtein(strings.ToLower("look at"), "google") != 5 {
		t.Errorf("'look at' , 'google' = %v", Levenshtein(strings.ToLower("look at"), "google"))
	}

	if Levenshtein(strings.ToLower("l"), "g") != 1 {
		t.Errorf("'l' , 'g' = %v", Levenshtein(strings.ToLower("l"), "g"))
	}

	if Levenshtein(strings.ToLower("love it"), "go to the beach") != 12 {
		t.Errorf("love it", "go to the beach = %v", Levenshtein(strings.ToLower("love it"), "go to the beach"))
	}

	sim := Levenshtein(strings.ToLower("Spokesman confirms senior government adviser was shot."), strings.ToLower("Spokesman said the senior adviser was shot dead."))
	if sim != 24 {
		t.Errorf("%v", sim)
	}
}

func TestGet(t *testing.T) {

	// similarly related (1538.2096034883082)
	str1 := "golang: read text file into string array (and write)"
	str2 := "writing to a text file gets cut short using java"

	// strongly similar (468.2115223342196)
	str3 := "Programming Interviews: What are some good resources to brush up on (or get better at) system designing interview questions? Specifically when you need to design a system all the way from the data center (and the machines in it) to picking the client-side architecture and framework."
	str4 := "I want to work on client side frameworks. For programming interview, I need to design a system from a data center or machines. What would be the good resource to prepare this interview?"
	if Get(str1, str2) < Get(str3, str4) {
		t.Errorf("%v\n%v\n", Get(str1, str2), Get(str3, str4))
	}

	// not similar at all
	str5 := "What's going on has to do with the pragmatics of conversation. In particular, you're flouting a conversational rule, called the Maxim of Quantity.This rule states that what a person contributes to a conversation should be neither more nor less than what is required in the context."
	str6 := "I think Go has a great future in Web development. For other applicative areas, I'm less certain as the development of the runtime is entirely focused on the problems associated with running stuff for the web: large static binaries, etc."
	if Get(str5, str6) != 322.9833817246995 {
		t.Errorf("%v", Get(str5, str6))
	}
}
