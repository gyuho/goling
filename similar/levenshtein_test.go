package similar

import (
	"strings"
	"testing"
)

func TestLevenshtein(t *testing.T) {
	// the bigger the return value is,
	// the more similar the two texts are.

	// insertion
	if Levenshtein(strings.ToLower("Hello"), strings.ToLower("Hellok")) != 1 {
		t.Errorf("'Hello', 'Hellok' = %v", Levenshtein(strings.ToLower("Hello"), strings.ToLower("Hellok")))
	}

	// deletion
	if Levenshtein(strings.ToLower("Hellok"), strings.ToLower("Hello")) != 1 {
		t.Errorf("'Hellok', 'Hello' = %v", Levenshtein(strings.ToLower("Hellok"), strings.ToLower("Hello")))
	}

	// substituition
	if Levenshtein(strings.ToLower("Hellok"), strings.ToLower("Helloa")) != 1 {
		t.Errorf("'Hellok', 'Helloa' = %v", Levenshtein(strings.ToLower("Hellok"), strings.ToLower("Helloa")))
	}

	// very similar texts
	text1 := "This is a foo bar sentence."
	text2 := "This sentence is similar to a foo bar sentence."
	if Levenshtein(strings.ToLower(text1), strings.ToLower(text2)) != 20 {
		t.Errorf("text1, text2 = %v", Levenshtein(strings.ToLower(text1), strings.ToLower(text2)))
	}

	// very different texts
	text3 := "AppendFloat appends the string form of the floating-point number f, as generated by FormatFloat, to dst and returns the extended buffer."
	text4 := "There are very simple ways to use matlab in parallel, with GPU, multi-thread support."
	if Levenshtein(strings.ToLower(text3), text4) != 98 {
		t.Errorf("text3, text4 = %v", Levenshtein(strings.ToLower(text3), text4))
	}

	// less different texts
	text5 := "How is the product team at SEOmoz structured?"
	text6 := "Moz: How trustworthy is SEOMoz after what they did to DOZ?"
	if Levenshtein(strings.ToLower(text5), strings.ToLower(text6)) != 40 {
		t.Errorf("text5, text6 = %v", Levenshtein(strings.ToLower(text5), strings.ToLower(text6)))
	}

	// same texts
	text7 := "I am a gopher."
	text8 := "I am a gopher."
	if Levenshtein(strings.ToLower(text7), strings.ToLower(text8)) != 0.0001 {
		t.Errorf("text7, text8 = %v", Levenshtein(strings.ToLower(text7), strings.ToLower(text8)))
	}

	// totally different text
	text9 := "I am a gopher."
	text0 := ""
	if Levenshtein(strings.ToLower(text9), text0) != 14 {
		t.Errorf("'I am a gopher', '' = %v", Levenshtein(strings.ToLower(text9), text0))
	}

	if Levenshtein(strings.ToLower("intention"), "execution") != 5 {
		t.Errorf("'intention', 'execution' = %v", Levenshtein(strings.ToLower("intention"), "execution"))
	}

	if Levenshtein(strings.ToLower("i n t e n t i o n"), "e x e c u t i o n") != 5 {
		t.Errorf("'i n t e n t i o n', 'e x e c u t i o n' = %v", Levenshtein(strings.ToLower("i n t e n t i o n"), "e x e c u t i o n"))
	}

	sim1 := Levenshtein(strings.ToLower("AGGCTATCACCTGACCTCCAGGCCGATGCC"), strings.ToLower("TAGCTATCACGACCGCGGTCGATTTGCCCGAC"))
	if sim1 != 14 {
		t.Errorf("DNA = %v", sim1)
	}

	if Levenshtein(strings.ToLower("like"), "lllikee") != 3 {
		t.Errorf("'like', 'lllikee' = %v", Levenshtein(strings.ToLower("like"), "lllikee"))
	}

	if Levenshtein(strings.ToLower("look at"), "google") != 5 {
		t.Errorf("'look at' , 'google' = %v", Levenshtein(strings.ToLower("look at"), "google"))
	}

	if Levenshtein(strings.ToLower("l"), "g") != 1 {
		t.Errorf("'l' , 'g' = %v", Levenshtein(strings.ToLower("l"), "g"))
	}

	if Levenshtein(strings.ToLower("love it"), "go to the beach") != 12 {
		t.Errorf("love it", "go to the beach = %v", Levenshtein(strings.ToLower("love it"), "go to the beach"))
	}

	sim := Levenshtein(strings.ToLower("Spokesman confirms senior government adviser was shot."), strings.ToLower("Spokesman said the senior adviser was shot dead."))
	if sim != 24 {
		t.Errorf("%v", sim)
	}
}
